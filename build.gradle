plugins {
    id 'java'
    id 'jacoco'
    id 'org.springframework.boot' version '3.5.3'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'org.sonarqube' version '4.4.1.3373'
    id 'org.owasp.dependencycheck' version '8.4.0'
}

group = 'com.sjprogramming.restapi'
version = '0.0.1-SNAPSHOT'
description = 'Demo project for Spring Boot'
sourceCompatibility = '17'

repositories {
    mavenCentral()
}

dependencies {
    // ✅ Spring Boot
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'

    // ✅ VULNERABLE DEPENDENCIES (for OWASP scan testing)
    implementation 'org.apache.logging.log4j:log4j-core:2.14.1'
    implementation 'commons-collections:commons-collections:3.2.1'
    implementation 'org.apache.struts:struts2-core:2.5.20'

    // ✅ Runtime & Dev
    runtimeOnly 'com.mysql:mysql-connector-j:8.0.32'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    compileOnly 'javax.servlet:javax.servlet-api:4.0.1'

    // ✅ Testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacoco {
    toolVersion = "0.8.10"
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required.set(true)
        html.required.set(true)
    }
}

// ✅ OWASP Dependency-Check Configuration
dependencyCheck {
    format = 'ALL'
    // Optional suppression file
    // suppressionFile = 'owasp-suppressions.xml'
    failBuildOnCVSS = 0

    analyzers {
        nodeAuditEnabled = false
    }
}

// ✅ SonarQube Configuration
sonarqube {
    properties {
        property "sonar.projectKey", "springboot-gradle-vuln"
        property "sonar.projectName", "springboot-gradle-vuln"
        property "sonar.host.url", "http://localhost:9000"
        property "sonar.login", "squ_f51f30159312a89e75d87cb59115429649755271"
        property "sonar.gradle.skipCompile", "true"
        property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
        property "sonar.dependencyCheck.reportPath", "build/reports/dependency-check-report.xml"
        property "sonar.dependencyCheck.htmlReportPath", "build/reports/dependency-check-report.html"
    }

    allprojects {
        tasks.withType(JavaCompile).configureEach {
            options.compilerArgs += ["-Xlint:none"]
        }
    }
    tasks.named("dependencyCheckAnalyze") {
        ignoreFailures = true
    }

}
